1. In this lesson, you created a middleware function called asyncWrapper. Why?
Answer: We created asyncWrapper so that we can abstract the try-catch logic into another function,
so that it can be reused/maintained with other functions

2. Suppose that you want to make sure that both a status code and an error message are sent
back to the user when they request the URL for a task that does not exist.
Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    return next( createCustomError(`Task with id ${taskID} does not exist`, 404));
  }  
  res.status(200).json({ task });  
});  